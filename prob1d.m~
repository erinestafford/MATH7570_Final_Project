clear all
close all

a = 0;
b = 2*pi;
N = 8; % number of cells; N+1 is the number of grid points
L = b-a; % size of the domain
h = L/N; % grid spacing
x = linspace(a,b,N+1)'; % column vector of grid points
phi_f = @(t) t.*cos(t); % inline function for the exact solution
rho_f = @(t) 2.*sin(t) + t.*cos(t); % inline function for the exact right-hand-side

phi_exact = phi_f(x); % exact solution at the grid points

alpha = phi_f(a); % boundary condition
beta = phi_f(b); % boundary condition

phi = zeros(N-1,1); % column vector for the solution
A = zeros(N-1,N-1); % matrix of discrete Laplacian.

rho = rho_f(x(2:N)); % exact rho at the grid points
rho(1) = rho(1) + alpha/h^2; % add boundary term
rho(N-1) = rho(N-1) + beta/h^2; % add boundary term

dA = diag( 2*ones(1,N-1) ); % diagonal matrix
dAp1 = diag( -1*ones(1,N-2), 1 ); % super-diagonal matrix
dAm1 = diag( -1*ones(1,N-2), -1 ); % sub-diagonal matrix
A = (dA + dAp1 + dAm1);
A % display the structure of A
A = A/h^2;

eigv = eig(A) % for curiosity, we check the eigenvalues of A

phi = A\rho; % solving the linear system

solver_err = max( abs(A*phi - rho) ) % Did the solver do his job?

phi_num = [alpha; phi; beta]; % enlarge the solution vector by the values at the boundary

plot(x,phi_exact,'b',x,phi_num,'ro-');
xlim([a b]);
xlabel('x');
ylabel('\phi(x)');
legend('exact','numerical','location','northwest');

L1 = h*sum( abs(phi_exact-phi_num) ); % error in L^1 norm
L2 = sqrt( h*sum( abs(phi_exact-phi_num).^2 ) ); % error in L^2 norm
Linf = max( abs(phi_exact-phi_num) ); % error in max norm

save(['err' num2str(N)],'h','L1','L2','Linf'); % save errors to a file named 'errN.mat'

if 1 % set to 1 once you generated all the error files, otherwise set to 0.
    Nvec = [8 16 32 64 128 256];
    for i=1:6
        err = load(['err' num2str(Nvec(i)) '.mat']);

        hvec(i) = err.h; % vector of grid parameters h
        L1vec(i) = err.L1; % vector of L1 norms
        L2vec(i) = err.L2; % vector of L2 norms
        Linfvec(i) = err.Linf; % vector of max norms
    end

    loglog(hvec,L1vec,'o-b',hvec,L2vec,'s-r',hvec,Linfvec,'+-g',hvec(1:3),1e-1*hvec(1:3).^2,'-k') % double logarithmic plot
    legend('L^1 error','L^2 error','L^\infty error','f(h) = 0.1*h^2','location','northwest')
    xlabel('h')
    ylabel('errors')
end