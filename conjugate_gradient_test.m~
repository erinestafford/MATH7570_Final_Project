function x = conjugate_gradient_test(np, rhs,x0,x1,y0,y1)
num =np;
x = zeros(num^2,1); %phi
dx = 2/(np-1);
r = rhs(:);
p = r;
Ap = r;

rr = 0.0;
for n = 1:length(r)
	p(n) = r(n);
	rr = rr+ (r(n) * r(n));
end

k = 0;
tol = 1.0e-8;
while (rr > tol * tol) 
		for n = 2:length(x)-1
			Ap(n) = 0.0;
			Ap(n) = -4.0 * p(n)+ p(n + 1)+p(n + num)+ p(n - 1)+ p(n - num);
        end

        pAp = 0.0;
		for n = 1:num^2
			pAp = pAp+ p(n) * Ap(n);
        end
		alpha = rr / pAp;

		rr1 = 0.0;
		for n = 1:num^2
			x(n) = x(n) + alpha * p(n);
			r(n) = r(n) - alpha * Ap(n);
			rr1 =rr1+ (r(n) * r(n));
        end
        
        beta = rr1 / rr;

		for n = 1:num^2
			p(n) = r(n) + beta * p(n);
        end

		rr = rr1;
		k = k+1;
	end

end